# yield example configuration.
#
# Everything after a # is a comment. Empty lines are ignored.
# Each function call goes on its own line and functions typically use the resulting queue from the previous function as
# their input.
# The configuration serves to construct coupled event queues. Any occurring events will then be processed by the queues
# in future.

# Include another configuration file.
:include definitions.yield

# Read file, yielding an event for each line.
watch "/tmp/test"
  # Make event stream available under name f.
  as f #Text
# Merge indented lines with previously encountered non-indented line.
combine #Text
# Convert the merged lines to JSON.
toJSON
  # Call the JSON stream anyEvent.
  as anyEvent #JSON

# Discard non-matching events in JSON stream.
where severtiy = hoi
  # Call the stream of remaining event important.
  as important #JSON

# Switch context to events from anyEvent stream.
listen anyEvent
where severtiy = b√§
  as reallyImportant #JSON

# Create new stream with all events from steam important and reallyImportant.
union important, reallyImportant #JSON
# Save those events to a file, one event per line.
save "output" #Status

listen reallyImportant #JSON
toText #Text
toJSON #JSON
where "error" #JSON
print Found error event:

listen f
# Print all events in stream f to console.
print

# Print all named event streams.
:context

watch "/tmp/test2"
union previous, f
print Mix:

listen f
toJSON
# Add test=testtext property to JSON event.
mutate +test testtext
# Add status property with value resulting from template (testtext status).
mutate +status ${test} status
# Removes property test.
mutate -test
# Convert JSON event to text using a template.
toText ${status} ${message}
print

# Watch for modified or added files.
watch /tmp/images/
# Define thumbnail property by extracting the file name of the path from the directory event.
grok affectedPath (?<thumbnail>[^/]+)$
# Redefine thumbnail property to contain an absolute path.
mutate +thumbnail /tmp/thumbnails/${thumbnail}
# Call image converter to create thumbnail. Working dir is /tmp.
shell /tmp/images/ convert -resize 80x80 -background black -format jpg -quality 75 ${affectedPath} ${thumbnail}
# Log conversion.
toText Created thumbnail for ${affectedPath} at ${thumbnail}.
print